{
    "docs": [
        {
            "location": "/",
            "text": "zend-expressive-authentication-basic\n\n\n\n\n\n\nThis library provides an HTTP Basic authentication adapter for\n\nzend-expressive-authentication\n,\nand thus PSR-7 middleware applications.\n\n\nInstallation\n\n\nRun the following to install this library:\n\n\n$ composer require zendframework/zend-expressive-authentication-basic\n\n\n\nDocumentation\n\n\nDocumentation is \nin the doc tree\n, and can be compiled using \nmkdocs\n:\n\n\n$ mkdocs build\n\n\n\nYou may also \nbrowse the documentation online\n.",
            "title": "Home"
        },
        {
            "location": "/#zend-expressive-authentication-basic",
            "text": "This library provides an HTTP Basic authentication adapter for zend-expressive-authentication ,\nand thus PSR-7 middleware applications.",
            "title": "zend-expressive-authentication-basic"
        },
        {
            "location": "/#installation",
            "text": "Run the following to install this library:  $ composer require zendframework/zend-expressive-authentication-basic",
            "title": "Installation"
        },
        {
            "location": "/#documentation",
            "text": "Documentation is  in the doc tree , and can be compiled using  mkdocs :  $ mkdocs build  You may also  browse the documentation online .",
            "title": "Documentation"
        },
        {
            "location": "/v1/intro/",
            "text": "Introduction\n\n\nThis component provides an HTTP Basic Authentication adapter for\n\nzend-expressive-authentication\n.\n\n\nHTTP Basic authentication utilizes the user-info section of the URL authority in\norder to provide credentials. While the HTTP specifications allow a single value\nfor the user-info, most implementations require a \n:\n-separated credential, with\nthe username first, and the password second; in fact, this is how browsers\nalways send HTTP Basic credentials, as their prompts are always for the two\nvalues. As such, \nthis implementation expects both a username and password in\nthe supplied credentials\n.\n\n\n\n\nOnly use in trusted networks\n\n\nSince HTTP Basic transmits the credentials via the URL, it should only be used\nwithin trusted networks, and never in public-facing sites, as the URL can be\nsniffed by MITM proxies.",
            "title": "Introduction"
        },
        {
            "location": "/v1/intro/#introduction",
            "text": "This component provides an HTTP Basic Authentication adapter for zend-expressive-authentication .  HTTP Basic authentication utilizes the user-info section of the URL authority in\norder to provide credentials. While the HTTP specifications allow a single value\nfor the user-info, most implementations require a  : -separated credential, with\nthe username first, and the password second; in fact, this is how browsers\nalways send HTTP Basic credentials, as their prompts are always for the two\nvalues. As such,  this implementation expects both a username and password in\nthe supplied credentials .",
            "title": "Introduction"
        },
        {
            "location": "/v1/intro/#only-use-in-trusted-networks",
            "text": "Since HTTP Basic transmits the credentials via the URL, it should only be used\nwithin trusted networks, and never in public-facing sites, as the URL can be\nsniffed by MITM proxies.",
            "title": "Only use in trusted networks"
        },
        {
            "location": "/v1/config/",
            "text": "Configuration\n\n\nTo use the adapter, you will need to provide the following configuration:\n\n\n\n\n\n\nA valid zend-expressive-authentication \nUserRepositoryInterface\n service in\n  your DI container. This service will perform the actual work of validating the\n  supplied credentials.\n\n\n\n\n\n\nAn HTTP Basic \nrealm\n. This may be an arbitrary value, but is \nrequired by\n  the specification\n.\n\n\n\n\n\n\nA response factory. If you are using Expressive, this is already configured\n  for you.\n\n\n\n\n\n\nAs an example of configuration:\n\n\n// config/autoload/authentication.global.php\n\nuse Zend\\Expressive\\Authentication\\AdapterInterface;\nuse Zend\\Expressive\\Authentication\\Basic\\BasicAccess;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\nuse Zend\\Expressive\\Authentication\\UserRepository\\PdoDatabase;\n\nreturn [\n    'dependencies' => [\n        'aliases' => [\n            // Use the default PdoDatabase user repository. This assumes\n            // you have configured that service correctly.\n            UserRepositoryInterface::class => PdoDatabase::class,\n\n            // Tell zend-expressive-authentication to use the BasicAccess\n            // adapter:\n            AdapterInterface::class => BasicAccess::class,\n        ],\n    ],\n    'authentication' => [\n        'realm' => 'api',\n    ],\n];",
            "title": "Configuration"
        },
        {
            "location": "/v1/config/#configuration",
            "text": "To use the adapter, you will need to provide the following configuration:    A valid zend-expressive-authentication  UserRepositoryInterface  service in\n  your DI container. This service will perform the actual work of validating the\n  supplied credentials.    An HTTP Basic  realm . This may be an arbitrary value, but is  required by\n  the specification .    A response factory. If you are using Expressive, this is already configured\n  for you.    As an example of configuration:  // config/autoload/authentication.global.php\n\nuse Zend\\Expressive\\Authentication\\AdapterInterface;\nuse Zend\\Expressive\\Authentication\\Basic\\BasicAccess;\nuse Zend\\Expressive\\Authentication\\UserRepositoryInterface;\nuse Zend\\Expressive\\Authentication\\UserRepository\\PdoDatabase;\n\nreturn [\n    'dependencies' => [\n        'aliases' => [\n            // Use the default PdoDatabase user repository. This assumes\n            // you have configured that service correctly.\n            UserRepositoryInterface::class => PdoDatabase::class,\n\n            // Tell zend-expressive-authentication to use the BasicAccess\n            // adapter:\n            AdapterInterface::class => BasicAccess::class,\n        ],\n    ],\n    'authentication' => [\n        'realm' => 'api',\n    ],\n];",
            "title": "Configuration"
        },
        {
            "location": "/v1/usage/",
            "text": "Usage\n\n\nWhenever you need an authenticated user, you can place the\nzend-expressive-authentication \nAuthenticationMiddleware\n in your pipeline.\n\n\nGlobally\n\n\nIf you need all routes to use authentication, add it globally.\n\n\n// In config/pipeline.php, within the callback:\n\n$app->pipe(Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class);\n\n\n\nFor an entire sub-path\n\n\nIf you need all routes that begin with a particular sub-path to require\nauthentication, use \npath-segregation\n:\n\n\n// In config/pipeline.php.\n// In the import statements:\nuse Zend\\Expressive\\Authentication\\AuthenticationMiddleware;\n\n// In the callback:\n$app->pipe('/api', $factory->path(\n    $factory->prepare(AuthenticationMiddleware::class)\n));\n\n\n\nFor a specific route\n\n\nIf you want to restrict access for a specific route, create a \nroute-specific\nmiddleware pipeline\n:\n\n\n// In config/routes.php, in the callback:\n\n$app->get(\n    '/path/requiring/authentication',\n    [\n        Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class,\n        HandlerRequiringAuthentication::class, // use your own handler here\n    ]\n);",
            "title": "Usage"
        },
        {
            "location": "/v1/usage/#usage",
            "text": "Whenever you need an authenticated user, you can place the\nzend-expressive-authentication  AuthenticationMiddleware  in your pipeline.",
            "title": "Usage"
        },
        {
            "location": "/v1/usage/#globally",
            "text": "If you need all routes to use authentication, add it globally.  // In config/pipeline.php, within the callback:\n\n$app->pipe(Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class);",
            "title": "Globally"
        },
        {
            "location": "/v1/usage/#for-an-entire-sub-path",
            "text": "If you need all routes that begin with a particular sub-path to require\nauthentication, use  path-segregation :  // In config/pipeline.php.\n// In the import statements:\nuse Zend\\Expressive\\Authentication\\AuthenticationMiddleware;\n\n// In the callback:\n$app->pipe('/api', $factory->path(\n    $factory->prepare(AuthenticationMiddleware::class)\n));",
            "title": "For an entire sub-path"
        },
        {
            "location": "/v1/usage/#for-a-specific-route",
            "text": "If you want to restrict access for a specific route, create a  route-specific\nmiddleware pipeline :  // In config/routes.php, in the callback:\n\n$app->get(\n    '/path/requiring/authentication',\n    [\n        Zend\\Expressive\\Authentication\\AuthenticationMiddleware::class,\n        HandlerRequiringAuthentication::class, // use your own handler here\n    ]\n);",
            "title": "For a specific route"
        },
        {
            "location": "/intro/",
            "text": "document.addEventListener(\"DOMContentLoaded\", function (event) {\n    window.location.pathname = '/zend-expressive-authentication-basic/v1/intro/';\n  });",
            "title": "_intro"
        }
    ]
}